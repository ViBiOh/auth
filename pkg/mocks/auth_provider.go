// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViBiOh/auth/v2/pkg/auth (interfaces: Provider)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/ViBiOh/auth/v2/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// Provider is a mock of Provider interface.
type Provider struct {
	ctrl     *gomock.Controller
	recorder *ProviderMockRecorder
}

// ProviderMockRecorder is the mock recorder for Provider.
type ProviderMockRecorder struct {
	mock *Provider
}

// NewProvider creates a new mock instance.
func NewProvider(ctrl *gomock.Controller) *Provider {
	mock := &Provider{ctrl: ctrl}
	mock.recorder = &ProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Provider) EXPECT() *ProviderMockRecorder {
	return m.recorder
}

// IsAuthorized mocks base method.
func (m *Provider) IsAuthorized(arg0 context.Context, arg1 model.User, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *ProviderMockRecorder) IsAuthorized(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*Provider)(nil).IsAuthorized), arg0, arg1, arg2)
}
