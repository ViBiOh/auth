// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../mocks/interfaces.go -package=mocks -mock_names UpdatableStorage=UpdatableStorage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	model "github.com/ViBiOh/auth/v2/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorage) Get(arg0 context.Context, arg1 uint64) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), arg0, arg1)
}

// UpdatableStorage is a mock of UpdatableStorage interface.
type UpdatableStorage struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *UpdatableStorageMockRecorder
}

// UpdatableStorageMockRecorder is the mock recorder for UpdatableStorage.
type UpdatableStorageMockRecorder struct {
	mock *UpdatableStorage
}

// NewUpdatableStorage creates a new mock instance.
func NewUpdatableStorage(ctrl *gomock.Controller) *UpdatableStorage {
	mock := &UpdatableStorage{ctrl: ctrl}
	mock.recorder = &UpdatableStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UpdatableStorage) EXPECT() *UpdatableStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *UpdatableStorage) Create(arg0 context.Context, arg1 model.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *UpdatableStorageMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*UpdatableStorage)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *UpdatableStorage) Delete(arg0 context.Context, arg1 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *UpdatableStorageMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*UpdatableStorage)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *UpdatableStorage) Get(arg0 context.Context, arg1 uint64) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *UpdatableStorageMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*UpdatableStorage)(nil).Get), arg0, arg1)
}

// Update mocks base method.
func (m *UpdatableStorage) Update(arg0 context.Context, arg1 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *UpdatableStorageMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*UpdatableStorage)(nil).Update), arg0, arg1)
}

// MockIdentification is a mock of Identification interface.
type MockIdentification struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockIdentificationMockRecorder
}

// MockIdentificationMockRecorder is the mock recorder for MockIdentification.
type MockIdentificationMockRecorder struct {
	mock *MockIdentification
}

// NewMockIdentification creates a new mock instance.
func NewMockIdentification(ctrl *gomock.Controller) *MockIdentification {
	mock := &MockIdentification{ctrl: ctrl}
	mock.recorder = &MockIdentificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentification) EXPECT() *MockIdentificationMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockIdentification) GetUser(arg0 context.Context, arg1 *http.Request) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIdentificationMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIdentification)(nil).GetUser), arg0, arg1)
}

// OnError mocks base method.
func (m *MockIdentification) OnError(arg0 http.ResponseWriter, arg1 *http.Request, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", arg0, arg1, arg2)
}

// OnError indicates an expected call of OnError.
func (mr *MockIdentificationMockRecorder) OnError(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockIdentification)(nil).OnError), arg0, arg1, arg2)
}

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// IsAuthorized mocks base method.
func (m *MockAuthorization) IsAuthorized(arg0 context.Context, arg1 model.User, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockAuthorizationMockRecorder) IsAuthorized(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockAuthorization)(nil).IsAuthorized), arg0, arg1, arg2)
}

// OnForbidden mocks base method.
func (m *MockAuthorization) OnForbidden(arg0 http.ResponseWriter, arg1 *http.Request, arg2 model.User, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnForbidden", arg0, arg1, arg2, arg3)
}

// OnForbidden indicates an expected call of OnForbidden.
func (mr *MockAuthorizationMockRecorder) OnForbidden(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnForbidden", reflect.TypeOf((*MockAuthorization)(nil).OnForbidden), arg0, arg1, arg2, arg3)
}
